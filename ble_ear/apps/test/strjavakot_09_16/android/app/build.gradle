//
//plugins {
//    id "com.android.application"
//    id "kotlin-android"
//    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
//    id "dev.flutter.flutter-gradle-plugin"
//}
//
//
//def keystoreProperties = new Properties()
//def keystorePropertiesFile = rootProject.file('key.properties')
//if (keystorePropertiesFile.exists()) {
//    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//}
//
//android {
//    namespace = "com.example.strjk"
//    compileSdk = flutter.compileSdkVersion
//    ndkVersion = flutter.ndkVersion
//
//    compileOptions {
//        sourceCompatibility = JavaVersion.VERSION_1_8
//        targetCompatibility = JavaVersion.VERSION_1_8
//    }
//
//    kotlinOptions {
//        jvmTarget = JavaVersion.VERSION_1_8
//    }
//
//    defaultConfig {
//        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
//        applicationId = "com.example.strjk"
//        // You can update the following values to match your application needs.
//        // For more information, see: https://flutter.dev/to/review-gradle-config.
//        minSdk = flutter.minSdkVersion
//        targetSdk = flutter.targetSdkVersion
//        versionCode = flutter.versionCode
//        versionName = flutter.versionName
//
//        externalNativeBuild {
//            ndkBuild {
//                // Get the GStreamer path from local.properties
//                def gstRoot = localProperties.getProperty('gstAndroidRoot')
//
//                // Pass arguments to ndk-build, just like in your original file
//                arguments "NDK_APPLICATION_MK=src/main/jni/Application.mk",
//                        "GSTREAMER_JAVA_SRC_DIR=src/main/java",
//                        "GSTREAMER_ROOT_ANDROID=$gstRoot"
//
//                // Specify which native modules to build
//                targets "main"
//            }
//        }
//    }
//
//    externalNativeBuild {
//        ndkBuild {
//            path "src/main/jni/Android.mk"
//        }
//    }
//
//    // Add other necessary configurations from your original file
//    buildFeatures {
//        viewBinding true
//    }
//
//    signingConfigs {
//        debug {
//            // ...
//        }
//        release {
//            if (keystoreProperties.getProperty('storeFile') != null) {
//                storeFile file(keystoreProperties.getProperty('storeFile'))
//                storePassword keystoreProperties.getProperty('storePassword')
//                keyAlias keystoreProperties.getProperty('keyAlias')
//                keyPassword keystoreProperties.getProperty('keyPassword')
//            }
//        }
//    }
//
//    buildTypes {
//        release {
//            signingConfig signingConfigs.release
//            minifyEnabled true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }
//    }
//    sourceSets {
//        main.java.srcDirs += 'src/main/java'
//    }
//}
//
//flutter {
//    source = "../.."
//}




plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}


// Load signing key properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

// Load local properties (for GStreamer SDK path)
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}


android {
    namespace = "com.example.strjk"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // <<< This is where the sourceSets block should be >>>
    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }

    defaultConfig {
        applicationId = "com.example.strjk"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        externalNativeBuild {
            ndkBuild {
                // <<< Use the 'localProperties' variable we loaded at the top >>>
                def gstRoot = localProperties.getProperty('gstAndroidRoot')

                arguments "NDK_APPLICATION_MK=src/main/jni/Application.mk",
                        "GSTREAMER_JAVA_SRC_DIR=src/main/java",
                        "GSTREAMER_ROOT_ANDROID=$gstRoot"

                targets "main"
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    buildFeatures {
        viewBinding true
    }

    signingConfigs {
        debug {
            // No changes needed for debug signing
        }
        release {
            // <<< Use the 'keystoreProperties' variable we loaded at the top >>>
            if (keystoreProperties.getProperty('storeFile') != null) {
                storeFile file(keystoreProperties.getProperty('storeFile'))
                storePassword keystoreProperties.getProperty('storePassword')
                keyAlias keystoreProperties.getProperty('keyAlias')
                keyPassword keystoreProperties.getProperty('keyPassword')
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

// =======================================================================
//  4. FLUTTER CONFIGURATION BLOCK
// =======================================================================

flutter {
    source = "../.."
}